# Create the database
CREATE DATABASE eCommerce;

# Use the created database
USE eCommerce;

# Create the Products table
CREATE TABLE Products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL );

# Create the Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    product_id INT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    quantity INT NOT NULL,
    order_date DATE NOT NULL );

# Insert data into the Products table
INSERT INTO Products (product_name, price) 
VALUES 
('Laptop', 999.99),
('Smartphone', 499.99),
('Tablet', 299.99),
('Smartwatch', 199.99),
('Headphones', 89.99),
('Bluetooth Speaker', 59.99),
('Camera', 549.99),
('Monitor', 149.99),
('Keyboard', 39.99),
('Mouse', 19.99),
('Printer', 89.99),
('Router', 49.99),
('External Hard Drive', 79.99),
('USB Flash Drive', 9.99),
('Gaming Console', 399.99),
('Television', 599.99),
('Projector', 299.99),
('Home Theater', 399.99),
('Screen Guard', 29.99),
('Smart Plug', 14.99);

# Insert data into the Orders table
INSERT INTO Orders (customer_id, product_id, quantity, order_date) VALUES
(1, 1, 1, '2024-08-28'),
(2, 3, 2, '2024-08-29'),
(1, 5, 1, '2024-09-01'),
(3, 2, 1, '2024-09-02'),
(4, 4, 3, '2024-09-03'),
(2, 6, 1, '2024-09-03'),
(1, 7, 1, '2024-09-04'),
(5, 8, 1, '2024-09-04'),
(3, 9, 1, '2024-09-05'),
(4, 11, 1, '2024-09-07'),
(2, 12, 1, '2024-09-08'),
(5, 13, 1, '2023-01-01'),
(3, 19, 1, '2023-01-01'),
(1, 14, 1, '2023-02-02'),
(7, 15, 2, '2023-03-03'),
(6, 16, 1, '2023-04-04'),
(4, 17, 1, '2023-05-05'),
(2, 19, 1, '2023-08-08'),
(1, 10, 2, '2023-09-09'),
(2, 19, 2, '2023-09-09');


# 1. Basic Queries:

# 1
# Total quantity of each product ordered

SELECT 
    p.product_name, 
    SUM(o.quantity) AS total_quantity_ordered
FROM 
    Orders o
JOIN 
    Products p ON o.product_id = p.product_id
GROUP BY 
    p.product_name
ORDER BY 
    total_quantity_ordered DESC;

# 2 
# All orders placed in the last 7 days

SELECT *
FROM 
    Orders
WHERE 
    order_date >= CURDATE() - INTERVAL 7 DAY
ORDER BY 
    order_date DESC;

# 3
# Total sales amount for each order

SELECT 
    o.order_id, 
    o.customer_id, 
    p.product_name, 
    o.quantity, 
    p.price, 
    (o.quantity * p.price) AS total_sales_amount
FROM 
    Orders o
JOIN 
    Products p ON o.product_id = p.product_id
ORDER BY 
    o.order_id;


# 2. Intermediate Queries:

# 1
# Top 3 best-selling products by total quantity

SELECT 
    p.product_name, 
    SUM(o.quantity) AS total_quantity_sold
FROM 
    Orders o
JOIN 
    Products p ON o.product_id = p.product_id
GROUP BY 
    p.product_name
ORDER BY 
    total_quantity_sold DESC
LIMIT 3;

# 2
# Total revenue generated by each product

SELECT 
    p.product_name, 
    SUM(o.quantity * p.price) AS total_revenue
FROM 
    Orders o
JOIN 
    Products p ON o.product_id = p.product_id
GROUP BY 
    p.product_name
ORDER BY 
    total_revenue DESC;

# 3
# Products that have never been ordered

SELECT 
    p.product_id, 
    p.product_name
FROM 
    Products p
LEFT JOIN 
    Orders o ON p.product_id = o.product_id
WHERE 
    o.product_id IS NULL;


# 3. Date & Time Queries:

# 1
# No. of orders were placed in each month of 2023 

SELECT 
    MONTHNAME(order_date) AS month,
    COUNT(order_id) AS total_orders
FROM 
    Orders
WHERE 
    YEAR(order_date) = 2023
GROUP BY 
	month
ORDER BY 
    month;

# 2
# All orders placed on weekends (Saturday and Sunday)

SELECT *
FROM 
    Orders
WHERE 
    DAYOFWEEK(order_date) IN (1, 7)
ORDER BY 
    order_date;


# 4. Customer-focused Queries:

# 1
# Customers who have placed more than 5 orders

SELECT 
    customer_id, 
    COUNT(order_id) AS total_orders
FROM 
    Orders
GROUP BY 
    customer_id
HAVING 
    total_orders >= 5
ORDER BY 
    total_orders DESC;

# 2
# Customers who placed an order within the first 30 days of the year

SELECT 
    DISTINCT customer_id,
    order_date
FROM 
    Orders
WHERE 
    DAYOFYEAR(order_date) <= 30
ORDER BY 
    customer_id;

# 3
# Optimize the Orders table by adding following indexes:
# 1. Index on order_date
# The order_date column is used in queries to filter or sort orders by date (e.g., finding orders within a specific date range or on weekends)

CREATE INDEX idx_order_date 
ON Orders(order_date);

# 2. Index on customer_id
# The customer_id column is used in queries to group orders by customer or to find orders placed by a specific customer

CREATE INDEX idx_customer_id 
ON Orders(customer_id);
